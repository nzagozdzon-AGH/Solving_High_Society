# High Society RL Observation Encoding: Dimensions, One-Hot, and Shape Robustness

## Overview
This document explains the observation encoding, tensor shapes, and one-hot encoding logic used in the High Society RL solution. It also documents the problems encountered, the robust solution implemented, and best practices for future maintainers.

---

## Observation Keys and Expected Shapes
Each observation is a dictionary with the following keys and expected shapes:

| Key              | Type         | Shape           | Description                        |
|------------------|--------------|-----------------|------------------------------------|
| action_mask      | float        | [batch, 562]    | Mask for available actions         |
| num_players      | one-hot float| [batch, 3]      | Number of players (3, 4, 5)        |
| current_bid      | float        | [batch, 1]      | Current bid (normalized)           |
| bidding_card     | one-hot float| [batch, 14]     | Current card up for bid            |
| player_money     | float        | [batch, 1]      | Player's money (normalized)        |
| player_hand      | float        | [batch, 14]     | Player's hand (card counts)        |
| player_score     | float        | [batch, 1]      | Player's score (normalized)        |
| highest_score    | float        | [batch, 1]      | Highest score in game              |
| poorest_money    | float        | [batch, 1]      | Poorest player's money             |
| score_of_winner  | float        | [batch, 1]      | Winner's score                     |
| red_cards        | float        | [batch, 1]      | Number of red cards                |

**Total concatenated feature size:** 600

---

## One-Hot Encoding and Robust Shape Handling

### Why Robust Handling is Needed
- Observations may come as scalars, 1D, 2D, or even 3D tensors due to batching, stacking, or library quirks.
- Sometimes, categorical variables (like `num_players` or `bidding_card`) are already one-hot encoded, sometimes not.
- Shape mismatches (e.g., [batch, 1, 3] vs [batch, 3] vs [batch]) caused hard-to-debug errors.

### Solution: Robust One-Hot Helper
A helper logic is used for categorical variables:
- If already one-hot ([batch, n]), use as is.
- If [batch, 1, n], flatten to [batch, n].
- If [batch] or [batch, 1], squeeze and one-hot encode.

Example for `num_players`:
```
if tensor.dim() == 3 and tensor.shape[1] == 1 and tensor.shape[2] == 3:
    tensor = tensor.view(tensor.size(0), 3)
elif tensor.dim() == 2 and tensor.shape[1] == 3:
    pass
else:
    tensor = tensor.squeeze(-1)
    tensor = F.one_hot(tensor.long(), num_classes=3).float()
```
Same logic applies for `bidding_card` (with 14 classes).

---

## Problems Encountered
- **Shape Mismatches:** Sometimes tensors were [batch, 1, n], [batch, n], or [batch].
- **Double One-Hot Encoding:** Accidentally one-hot encoding an already one-hot tensor led to huge feature sizes (e.g., [batch, 9] for `num_players`).
- **Hard-to-Debug Errors:** Errors only appeared at runtime, often deep in the RL library stack.

### How We Fixed It
- Added robust shape handling for all categorical variables.
- Used assertions and debug prints to catch shape mismatches early.
- Ensured all tensors are 2D ([batch, feature_size]) before concatenation.
- Automated feature size calculation to match real data.

---

## Best Practices for Future Changes
1. **Centralize Preprocessing:** Use a single function/class to preprocess all observations.
2. **Document Expected Shapes:** At the top of your feature extractor, list all keys and expected shapes.
3. **Assert Shapes:** For every key, assert the shape after processing.
4. **Helper for One-Hot:** Use a helper function for all categorical variables.
5. **Test Preprocessing:** Write unit tests for preprocessing with various input shapes.
6. **Update obs_sizes Dynamically:** Consider calculating feature sizes from processed tensors.

---

## Adding New Observations
- Add the new key and its expected shape/type to the contract.
- Update the preprocessing logic to handle all possible input shapes for the new key.
- Add an assertion for the new key's shape.
- Update the total feature size if needed.

---

## Example Contract Block
```
# Observation shape contract:
# - action_mask: [batch, 562], float
# - num_players: [batch, 3], one-hot float
# - bidding_card: [batch, 14], one-hot float
# - ...
```

---

## Summary
- Always preprocess and assert shapes for every observation.
- Use robust one-hot logic for categorical variables.
- Document and test your preprocessing pipeline.
- This will make your code robust, maintainable, and easy for future developers (or AIs) to debug and extend.
